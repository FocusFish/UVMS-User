<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
         http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd"> 

        
   
         	

   <changeSet author="emtudorsm" id="postgresApplicationTrigger1"  runOnChange="true" dbms="postgresql">
   	<createProcedure>
	  	CREATE OR REPLACE FUNCTION APPLICATION_BI()
			  RETURNS trigger AS
			 $BODY$
			begin
			
			  if NEW.application_id IS NULL 
				then
					begin
						NEW.application_id :=nextval('SQ_APPLICATION');
					end;  
				end if;
			
			
			  IF NEW.created_on IS NULL
			  THEN
			      NEW.created_on := current_timestamp;
			  END IF;	
			
			  if NEW.created_by is NULL
			  THEN 
			    NEW.created_by :=UPPER(current_user);
			  ELSE
			  	NEW.created_by :=UPPER(NEW.created_by);  
			  END IF;  
			  RETURN NEW;	
			  EXCEPTION
			     WHEN OTHERS THEN 
			     RAISE WARNING 'APPLICATION_BI: SQLSTATE %: %', SQLSTATE, SQLERRM;
			     RETURN NULL;  	
			end;$BODY$
			  LANGUAGE plpgsql VOLATILE
			  COST 100;
			
			CREATE TRIGGER APPLICATION_BI BEFORE INSERT ON APPLICATION_T
			    FOR EACH ROW EXECUTE PROCEDURE APPLICATION_BI(); 
	   </createProcedure>
	  <rollback>
	  	drop trigger application_bi on application_t;
		drop function application_bi();
	  </rollback>
	   </changeSet>      	
   
   <changeSet author="emtudorsm" id="postgresApplicationTrigger2"  runOnChange="true" dbms="postgresql">
   		<createProcedure>
			  	CREATE OR REPLACE FUNCTION APPLICATION_BU()
			  RETURNS trigger AS
			 $BODY$
			begin
			
			  IF NEW.modified_on IS NULL or (OLD.modified_on = OLD.modified_on)
			  THEN
			      NEW.modified_on := current_timestamp;
			  END IF;	
			
			  if NEW.modified_by is NULL or (NEW.modified_by = OLD.modified_by)
			  THEN 
			    NEW.modified_by :=UPPER(current_user);
			  ELSE
			  	NEW.modified_by :=UPPER(NEW.modified_by);  
			  END IF;  
			  RETURN NEW;	
			  EXCEPTION
			     WHEN OTHERS THEN 
			     RAISE WARNING 'APPLICATION_BU: SQLSTATE %: %', SQLSTATE, SQLERRM;
			     RETURN NULL;  	
			end;$BODY$
			  LANGUAGE plpgsql VOLATILE
			  COST 100;
			
			CREATE TRIGGER APPLICATION_BU BEFORE UPDATE ON APPLICATION_T
			    FOR EACH ROW EXECUTE PROCEDURE APPLICATION_BU(); 
   			
	  </createProcedure>
  	<rollback>
  		drop trigger application_bu on application_t;
		drop function application_bu();
  	</rollback>
   	
   </changeSet>      	
            	
</databaseChangeLog>