<?xml version="1.0" encoding="UTF-8"?>

<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
         http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd">

<changeSet author="emtudorsm" id="scopeTable_update2">
	<sql dbms="postgresql">
		update SCOPE_T set ACTIVE_FROM=now() where ACTIVE_FROM is null;
	</sql>
	<sql dbms="postgresql">
		update SCOPE_T set ACTIVE_TO=now()+interval '1 year' where ACTIVE_TO is null;
	</sql>
	<addNotNullConstraint tableName="SCOPE_T" columnName="ACTIVE_FROM" />
	<addNotNullConstraint tableName="SCOPE_T" columnName="ACTIVE_TO" />
</changeSet>   


<changeSet author="emtudorsm" id="organisationTable_update1">
	<addColumn tableName="organisation_t">
		<column name="e_mail" type="VARCHAR(64)" remarks="The e-mail of the organisation"/>
	</addColumn>
	<dropColumn tableName="organisation_t" columnName="branch"/>
	<rollback>
		<dropColumn tableName="organisation_t" columnName="e_mail"/>
		<addColumn tableName="organisation_t">
		 <column name="branch" type="VARCHAR(512)" remarks="The name of a specific branch of the organisation"/>
		</addColumn>
	</rollback>
</changeSet>      	

<changeSet author="emtudorsm" id="endPointContact_table">
	<createTable tableName="end_point_contact_t" remarks="Holds information about the relation between endpoint and person.">
  		<column name="end_point_contact_id" type="INTEGER">
    		<constraints nullable="false"/>
    	</column>	
     <column name="end_point_id" type="INTEGER" remarks="The link towards the end point">
    	<constraints nullable="false"/>
  	 </column>	
  	 <column name="person_id" type="INTEGER" remarks="The link towards the end person">
    	<constraints nullable="false"/>
  	</column>
	</createTable>	 
	<addPrimaryKey tableName="end_point_contact_t" constraintName="pk_end_point_contact" columnNames="end_point_contact_id"/>
	
	<createIndex tableName="end_point_contact_t" indexName="fk_end_point_contact">
  		<column name="end_point_id"/>
	</createIndex>
	<createIndex tableName="end_point_contact_t" indexName="fk_end_point_person">
  		<column name="person_id"/>
	</createIndex>
	<createIndex tableName="end_point_contact_t" indexName="uk_end_point_contact" unique="true">
 		 <column name="end_point_id"/>
  		 <column name="person_id"/>
    </createIndex>
	<addForeignKeyConstraint baseTableName="end_point_contact_t" constraintName="end_point_contact_fk" baseColumnNames="end_point_id" referencedTableName="end_point_t" referencedColumnNames="end_point_id"/>
	<addForeignKeyConstraint baseTableName="end_point_contact_t" constraintName="end_point_contact_person_fk" baseColumnNames="person_id" referencedTableName="person_t" referencedColumnNames="person_id"/>
	<createSequence sequenceName="sq_end_point_contact" startValue="100000" incrementBy="1" minValue="1"/>
	<rollback>
		<dropSequence sequenceName="sq_end_point_contact"/>
		<dropTable tableName="end_point_contact_t" cascadeConstraints="true"/>
	</rollback>
</changeSet>

<changeSet author="emtudorsm" id="channelTable">
	<createTable tableName="channel_t" remarks="Holds the information about channels">
		<column name="channel_id" type="INTEGER" remarks="The primary key of this table">
			<constraints nullable="false"/>
		</column>
		<column name="dataflow" type="varchar(255)" remarks="The dataflow value">
			 <constraints nullable="false"/>
		</column>
		<column name="service" type="varchar(64)" remarks="The name of the provided service">
				 <constraints nullable="false"/>
		</column>
		<column name="priority" type="int" remarks="The priority for selecting this channel when many are available">
				 <constraints nullable="false"/>
		</column>
		<column name="end_point_id" type="INTEGER" remarks="The link towards the end point">
    		<constraints nullable="false"/>
  	 	</column>
  	 	 <column name="created_by" type="VARCHAR(32)" remarks="The name of the user who created the entry">
        <constraints nullable="false"/>
      	</column>
     	 <column name="created_on" type="TIMESTAMP" remarks="The date and time the entry was created">
       	 <constraints nullable="false"/>
     	</column>
      	<column name="modified_by" type="VARCHAR(32)" remarks="The name of the user who performed the last update on the entry"/>
      	<column name="modified_on" type="TIMESTAMP" remarks="The date and time the entry was last updated"/>
	</createTable>
	<addPrimaryKey tableName="channel_t" constraintName="pk_channel" columnNames="channel_id"/>
	<createIndex tableName="channel_t" indexName="uk_channel" unique="true">
 		 <column name="dataflow"/>
  		 <column name="service"/>	
  		 <column name="end_point_id"/>
    </createIndex>
	<addForeignKeyConstraint baseTableName="channel_t" constraintName="end_point_channel_fk" baseColumnNames="end_point_id" referencedTableName="end_point_t" referencedColumnNames="end_point_id"/>
	<createSequence sequenceName="sq_channel" startValue="100000" incrementBy="1" minValue="1"/>
	<rollback>
		<dropSequence sequenceName="sq_channel"/>
		<dropTable tableName="channel_t" cascadeConstraints="true"/>
	</rollback>
</changeSet>

   <changeSet author="emtudorsm" id="postgresEndPointContactTrigger1"  runOnChange="true" dbms="postgresql">
   	<createProcedure>
	  	CREATE OR REPLACE FUNCTION end_point_contact_bi()
			  RETURNS trigger AS
			 $BODY$
			begin
			
			  if NEW.end_point_contact_id IS NULL 
				then
					begin
						NEW.end_point_contact_id :=nextval('sq_end_point_contact');
					end;  
				end if;
			  RETURN NEW;	
			  EXCEPTION
			     WHEN OTHERS THEN 
			     RAISE WARNING 'end_point_contact_bi: SQLSTATE %: %', SQLSTATE, SQLERRM;
			     RETURN NULL;  	
			end;$BODY$
			  LANGUAGE plpgsql VOLATILE
			  COST 100;
			
			CREATE TRIGGER end_point_contact_bi BEFORE INSERT ON end_point_contact_t
			    FOR EACH ROW EXECUTE PROCEDURE end_point_contact_bi(); 
	   </createProcedure>
	  <rollback>
	  	drop trigger end_point_contact_bi on end_point_contact_t;
		drop function end_point_contact_bi();
	  </rollback>
  </changeSet> 
   

   <changeSet author="emtudorsm" id="postgresChannelTrigger1"  runOnChange="true" dbms="postgresql">
   	<createProcedure>
	  	CREATE OR REPLACE FUNCTION channel_BI()
			  RETURNS trigger AS
			 $BODY$
			begin
			
			  if NEW.channel_id IS NULL 
				then
					begin
						NEW.channel_id :=nextval('SQ_CHANNEL');
					end;  
				end if;
			
			
			  IF NEW.created_on IS NULL
			  THEN
			      NEW.created_on := current_timestamp;
			  END IF;	
			
			  if NEW.created_by is NULL
			  THEN 
			    NEW.created_by :=UPPER(current_user);
			  ELSE
			  	NEW.created_by :=UPPER(NEW.created_by);  
			  END IF;  
			  RETURN NEW;	
			  EXCEPTION
			     WHEN OTHERS THEN 
			     RAISE WARNING 'channel_BI: SQLSTATE %: %', SQLSTATE, SQLERRM;
			     RETURN NULL;  	
			end;$BODY$
			  LANGUAGE plpgsql VOLATILE
			  COST 100;
			
			CREATE TRIGGER channel_BI BEFORE INSERT ON channel_T
			    FOR EACH ROW EXECUTE PROCEDURE channel_BI(); 
	   </createProcedure>
	  <rollback>
	  	drop trigger channel_bi on channel_t;
		drop function channel_bi();
	  </rollback>
	   </changeSet>      	
   
   <changeSet author="emtudorsm" id="postgreschannelTrigger2"  runOnChange="true" dbms="postgresql">
   		<createProcedure>
			  	CREATE OR REPLACE FUNCTION channel_BU()
			  RETURNS trigger AS
			 $BODY$
			begin
			
			  IF NEW.modified_on IS NULL or (OLD.modified_on = OLD.modified_on)
			  THEN
			      NEW.modified_on := current_timestamp;
			  END IF;	
			
			  if NEW.modified_by is NULL or (NEW.modified_by = OLD.modified_by)
			  THEN 
			    NEW.modified_by :=UPPER(current_user);
			  ELSE
			  	NEW.modified_by :=UPPER(NEW.modified_by);  
			  END IF;  
			  RETURN NEW;	
			  EXCEPTION
			     WHEN OTHERS THEN 
			     RAISE WARNING 'channel_BU: SQLSTATE %: %', SQLSTATE, SQLERRM;
			     RETURN NULL;  	
			end;$BODY$
			  LANGUAGE plpgsql VOLATILE
			  COST 100;
			
			CREATE TRIGGER channel_BU BEFORE UPDATE ON channel_T
			    FOR EACH ROW EXECUTE PROCEDURE channel_BU(); 
   			
	  </createProcedure>
  	<rollback>
  		drop trigger channel_bu on channel_t;
		drop function channel_bu();
  	</rollback>
   	
   </changeSet>      	
            	
 <changeSet author="emtudorsm" id="moveEndpointData">
	<sql>
		insert into END_POINT_CONTACT_T(end_point_id, person_id)
		select end_point_id, person_id from end_point_t
	</sql>
 </changeSet>

 <changeSet author="emtudorsm" id="updateEndpointTable1">
 	<dropForeignKeyConstraint baseTableName="end_point_t" constraintName="end_point_person_fk"/>
	<dropColumn tableName="end_point_t" columnName="person_id"/>
	<dropColumn tableName="end_point_t" columnName="priority"/>
	<addColumn tableName="end_point_t">
		<column name="e_mail" type="VARCHAR(64)" remarks="The e-mail of the endpoint"/>
	</addColumn>
 </changeSet>
 
 
   <changeSet author="emtudorsm" id="postgresUserContextTrigger1"  runOnChange="true" dbms="postgresql">
   	<sql>
   		drop trigger user_role_bi on user_context_t;
		drop function user_role_bi();
   	</sql>
   	<createProcedure>
	  	CREATE OR REPLACE FUNCTION user_context_BI()
			  RETURNS trigger AS
			 $BODY$
			begin
			
			  if NEW.user_context_id IS NULL 
				then
					begin
						NEW.user_context_id :=nextval('SQ_USER_ROLE');
					end;  
				end if;
			  RETURN NEW;	
			  EXCEPTION
			     WHEN OTHERS THEN 
			     RAISE WARNING 'user_context_BI: SQLSTATE %: %', SQLSTATE, SQLERRM;
			     RETURN NULL;  	
			end;$BODY$
			  LANGUAGE plpgsql VOLATILE
			  COST 100;
			
			CREATE TRIGGER user_context_BI BEFORE INSERT ON user_context_T
			    FOR EACH ROW EXECUTE PROCEDURE user_context_BI(); 
	   </createProcedure>
	  <rollback>
	  	drop trigger user_context_bi on user_context_t;
		drop function user_context_bi();
	  </rollback>
	   </changeSet>     
 
	
	<changeSet author="emtudorsm" id="postgresqlUpView_update2" runOnChange="true" dbms="postgresql">
		 <dropView viewName="USER_PROFILE_V"/>
	<createView viewName="USER_PROFILE_V">
		 SELECT a.name AS application_name,
		    u.user_name,
		    o.name AS option_name,
		    p.option_value,
		    'N'::text AS is_default, 
		    uc.user_context_id
		   FROM option_t o,
		    application_t a,
		    preference_t p
		    INNER JOIN USER_CONTEXT_T UC on uc.USER_CONTEXT_ID=p.user_context_id
		    INNER JOIN USER_T u on u.user_id=uc.USER_ID
		  WHERE o.application_id = a.application_id AND p.option_id = o.option_id
	UNION
		 SELECT a.name AS application_name,
		    u.user_name,
		    o.name AS option_name,
		    o.default_value AS option_value,
		    'Y'::text AS is_default,
		    null as user_context_id
		   FROM option_t o,
		    application_t a,
		    user_t u
		  WHERE o.application_id = a.application_id AND o.default_value IS NOT NULL AND NOT (EXISTS ( SELECT 1
				FROM preference_t p 
				INNER JOIN USER_CONTEXT_T UC on uc.USER_CONTEXT_ID=p.user_context_id
			  WHERE p.option_id = o.option_id and uc.user_id=u.user_id))
	</createView>
	<rollback>
		<dropView viewName="USER_PROFILE_V"/>
	</rollback>
	</changeSet>

<changeSet author="emtudorsm" id="preferenceTable_update2">
	<dropForeignKeyConstraint baseTableName="PREFERENCE_T" constraintName="preference_user_fk"/>
	<dropColumn tableName="PREFERENCE_T" columnName="USER_ID"/>
	<sql>DELETE FROM PREFERENCE_T</sql>
	<addNotNullConstraint tableName="PREFERENCE_T" columnDataType="INTEGER" columnName="USER_CONTEXT_ID"/>
	<createIndex tableName="preference_t" indexName="uk_pref_user_option" unique="true">
  		<column name="user_context_id"/>
  		<column name="option_id"/>
  	</createIndex>
</changeSet>

<changeSet author="emtudorsm" id="updateEndpointsTable2">
	<sql>update end_point_t set name=name||'_backup' where uri like '%backup%'</sql>
	<createIndex tableName="end_point_t" indexName="uk_end_point_org" unique="true">
  		<column name="name"/>
  		<column name="organisation_id"/>
  	</createIndex>
</changeSet>
 
</databaseChangeLog>